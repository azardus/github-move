# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
  - '*'
# - master

pool:
  vmImage: 'ubuntu-16.04'
  # vmImage: 'windows-latest'
  # vmImage: 'ubuntu-latest'

  # La demands section => ci-dessous pool spécifie que nous avons besoin de npm, le gestionnaire de paquets Node.js, installé sur le système de construction.
  demands:    
    - npm

variables:
  # solution: '**/*.sln'
  # buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  wwwrootDir: 'Tailspin.SpaceGame.Web/wwwroot'
  dotnetVersion: '3.1.100'

# steps section => vous voyez les tâches de génération qui correspondent à chacune des commandes de script que nous avons identifiées précédemment.
steps:
  # tâches de génération intégrées
- task: UseDotNet@2
  displayName: 'Use .NET Core SDK $(dotnetVersion)'
  inputs:
    packageType: sdk
    version: $(dotnetVersion)

- task: Npm@1
  displayName: 'Run npm install'
  inputs:
    verbose: false

  # Pour exécuter des commandes système générales, vous utilisez la tâche CmdLine@2ou script. Le pipeline utilise la scripttâche car il s'agit d'un raccourci commun pour CmdLine@2.
  # exécute l'utilitaire node-sass
- script: './node_modules/.bin/node-sass $(wwwrootDir) --output $(wwwrootDir)'
  displayName: 'Compile Sass assets'

  # tâches de gulp qui réduisent les actifs JavaScript et CSS:
- task: gulp@1
  displayName: 'Run gulp tasks'

  # écrit des informations de génération dans un fichier texte
- script: 'echo "$(Build.DefinitionName), $(Build.BuildId), $(Build.BuildNumber)" > buildinfo.txt'
  displayName: 'Write build info'
  workingDirectory: $(wwwrootDir)
    
- task: DotNetCoreCLI@2
  displayName: 'Restore project dependencies'
  inputs:
    command: 'restore'
    projects: '**/*.csproj'

- task: DotNetCoreCLI@2
  displayName: 'Build the project - $(buildConfiguration)'
  inputs:
    command: 'build'
    arguments: '--no-restore --configuration $(buildConfiguration)'
    projects: '**/*.csproj'

  # La première tâche utilise la DotNetCoreCLI@2tâche pour publier ou empaqueter les résultats de génération de l'application (y compris ses dépendances) dans un dossier. 
- task: DotNetCoreCLI@2
  displayName: 'Publish the project - $(buildConfiguration)'
  inputs:
    command: publish
    projects: '**/*.csproj'
    publishWebProjects: false
    arguments: '--no-build --configuration $(buildConfiguration) --output $(Build.artifactStagingDirectory)/$(buildConfiguration)'
    # L' zipAfterPublishargument spécifie d'ajouter les résultats générés à un fichier .zip.
    zipAfterPublish: true

  # Créer l'artifact sous zip file de la solution qui vient d'etre publish
- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: drop'
  condition: succeeded()


# - script: dotnet build --configuration $(buildConfiguration)
#   displayName: 'dotnet build $(buildConfiguration)'
# - task: NuGetToolInstaller@1

# - task: NuGetCommand@2
#   inputs:
#     restoreSolution: '$(solution)'

# - task: VSBuild@1
#   inputs:
#     solution: '$(solution)'
#     msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="$(build.artifactStagingDirectory)"'
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   inputs:
#     platform: '$(buildPlatform)'
#     configuration: '$(buildConfiguration)'
